"""add input_mode to sessions and messages tables

Revision ID: acaaec37462f
Revises: ae4552e35c03
Create Date: 2025-10-26 12:41:46.360689

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op


def _index_exists(connection, table_name: str, index_name: str) -> bool:
    """Check if an index exists in the database."""
    result = connection.execute(
        sa.text(
            "SELECT 1 FROM pg_indexes WHERE schemaname = 'public' AND "
            "tablename = :table_name AND indexname = :index_name"
        ),
        {"table_name": table_name, "index_name": index_name},
    )
    return result.fetchone() is not None


def _column_exists(connection, table_name: str, column_name: str) -> bool:
    """Check if a column exists in a table."""
    result = connection.execute(
        sa.text(
            "SELECT 1 FROM information_schema.columns WHERE "
            "table_schema = 'public' AND table_name = :table_name AND "
            "column_name = :column_name"
        ),
        {"table_name": table_name, "column_name": column_name},
    )
    return result.fetchone() is not None

# revision identifiers, used by Alembic.
revision: str = "acaaec37462f"
down_revision: Union[str, None] = "ae4552e35c03"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()

    op.alter_column(
        "curriculum_content",
        "id",
        existing_type=sa.VARCHAR(length=50),
        comment=None,
        existing_comment="Unique identifier for content chunk",
        existing_nullable=False,
    )
    op.alter_column(
        "curriculum_content",
        "title",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="Content title",
        existing_nullable=False,
    )
    op.alter_column(
        "curriculum_content",
        "grade",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Grade level (1-12)",
        existing_nullable=False,
    )
    op.alter_column(
        "curriculum_content",
        "subject",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="Subject name",
        existing_nullable=False,
    )
    op.alter_column(
        "curriculum_content",
        "content_text",
        existing_type=sa.TEXT(),
        comment=None,
        existing_comment="Educational content text",
        existing_nullable=False,
    )
    op.alter_column(
        "curriculum_content",
        "learning_objectives",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        comment=None,
        existing_comment="Array of OA IDs this content addresses",
        existing_nullable=False,
    )
    op.alter_column(
        "curriculum_content",
        "ministry_standard_ref",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="Reference to ministry standard document",
        existing_nullable=False,
    )
    op.alter_column(
        "curriculum_content",
        "ministry_approved",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="0=pending, 1=approved by ministry standards",
        existing_nullable=False,
        existing_server_default=sa.text("0"),
    )
    op.alter_column(
        "curriculum_content",
        "keywords",
        existing_type=sa.TEXT(),
        comment=None,
        existing_comment="Search keywords",
        existing_nullable=False,
    )
    op.alter_column(
        "curriculum_content",
        "difficulty_level",
        existing_type=sa.VARCHAR(length=20),
        comment=None,
        existing_comment="Content difficulty: easy, medium, hard",
        existing_nullable=False,
    )
    op.alter_column(
        "curriculum_content",
        "chunk_index",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Index of chunk if split from larger document",
        existing_nullable=True,
        existing_server_default=sa.text("0"),
    )
    op.alter_column(
        "curriculum_content",
        "source_file",
        existing_type=sa.VARCHAR(length=500),
        comment=None,
        existing_comment="Source PDF or document file path",
        existing_nullable=True,
    )
    op.alter_column(
        "curriculum_content",
        "embedding_generated",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="Whether vector embedding has been generated",
        existing_nullable=False,
        existing_server_default=sa.text("false"),
    )

    # Create indexes only if they don't exist (idempotent)
    if not _index_exists(bind, "curriculum_content", "ix_curriculum_content_difficulty_level"):
        op.create_index(
            op.f("ix_curriculum_content_difficulty_level"),
            "curriculum_content",
            ["difficulty_level"],
            unique=False,
        )
    if not _index_exists(bind, "curriculum_content", "ix_curriculum_content_grade"):
        op.create_index(
            op.f("ix_curriculum_content_grade"),
            "curriculum_content",
            ["grade"],
            unique=False,
        )
    if not _index_exists(bind, "curriculum_content", "ix_curriculum_content_keywords"):
        op.create_index(
            op.f("ix_curriculum_content_keywords"),
            "curriculum_content",
            ["keywords"],
            unique=False,
        )
    if not _index_exists(bind, "curriculum_content", "ix_curriculum_content_subject"):
        op.create_index(
            op.f("ix_curriculum_content_subject"),
            "curriculum_content",
            ["subject"],
            unique=False,
        )
    op.drop_table_comment(
        "curriculum_content",
        existing_comment="Educational content chunks aligned with ministry standards",
        schema=None,
    )

    # Add input_mode column to messages only if it doesn't exist
    if not _column_exists(bind, "messages", "input_mode"):
        op.add_column(
            "messages",
            sa.Column(
                "input_mode", sa.String(length=10), server_default="text", nullable=False
            ),
        )
    op.alter_column(
        "ministry_standards",
        "oa_id",
        existing_type=sa.VARCHAR(length=50),
        comment=None,
        existing_comment="Unique identifier for learning objective (e.g., MAT-5-OA01)",
        existing_nullable=False,
    )
    op.alter_column(
        "ministry_standards",
        "grade",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Grade level (1-12)",
        existing_nullable=False,
    )
    op.alter_column(
        "ministry_standards",
        "subject",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="Subject name (e.g., MatemÃ¡tica, Lenguaje)",
        existing_nullable=False,
    )
    op.alter_column(
        "ministry_standards",
        "oa_code",
        existing_type=sa.VARCHAR(length=20),
        comment=None,
        existing_comment="Official OA code (e.g., OA 01)",
        existing_nullable=False,
    )
    op.alter_column(
        "ministry_standards",
        "description",
        existing_type=sa.TEXT(),
        comment=None,
        existing_comment="Learning objective description",
        existing_nullable=False,
    )
    op.alter_column(
        "ministry_standards",
        "skills",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        comment=None,
        existing_comment="Array of skills covered",
        existing_nullable=False,
    )
    op.alter_column(
        "ministry_standards",
        "keywords",
        existing_type=sa.TEXT(),
        comment=None,
        existing_comment="Search keywords for content matching",
        existing_nullable=False,
    )
    op.alter_column(
        "ministry_standards",
        "official_document_ref",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="Reference to official ministry document",
        existing_nullable=False,
    )
    # Create ministry_standards indexes only if they don't exist (idempotent)
    if not _index_exists(bind, "ministry_standards", "ix_ministry_standards_grade"):
        op.create_index(
            op.f("ix_ministry_standards_grade"),
            "ministry_standards",
            ["grade"],
            unique=False,
        )
    if not _index_exists(bind, "ministry_standards", "ix_ministry_standards_subject"):
        op.create_index(
            op.f("ix_ministry_standards_subject"),
            "ministry_standards",
            ["subject"],
            unique=False,
        )
    op.drop_table_comment(
        "ministry_standards",
        existing_comment="Chilean Ministry of Education learning objectives (OAs)",
        schema=None,
    )

    # Add input_mode column to sessions only if it doesn't exist
    if not _column_exists(bind, "sessions", "input_mode"):
        op.add_column(
            "sessions",
            sa.Column(
                "input_mode", sa.String(length=10), server_default="text", nullable=False
            ),
        )
    # Drop these indexes only if they exist
    if _index_exists(bind, "sessions", "idx_sessions_learning_content_exists"):
        op.drop_index(op.f("idx_sessions_learning_content_exists"), table_name="sessions")
    if _index_exists(bind, "sessions", "idx_sessions_study_guide_exists"):
        op.drop_index(op.f("idx_sessions_study_guide_exists"), table_name="sessions")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()

    # Create these indexes only if they don't exist
    if not _index_exists(bind, "sessions", "idx_sessions_study_guide_exists"):
        op.create_index(
            op.f("idx_sessions_study_guide_exists"),
            "sessions",
            [sa.literal_column("(study_guide IS NOT NULL)")],
            unique=False,
        )
    if not _index_exists(bind, "sessions", "idx_sessions_learning_content_exists"):
        op.create_index(
            op.f("idx_sessions_learning_content_exists"),
            "sessions",
            [sa.literal_column("(learning_content IS NOT NULL)")],
            unique=False,
        )

    # Drop column only if it exists
    if _column_exists(bind, "sessions", "input_mode"):
        op.drop_column("sessions", "input_mode")
    op.create_table_comment(
        "ministry_standards",
        "Chilean Ministry of Education learning objectives (OAs)",
        existing_comment=None,
        schema=None,
    )

    # Drop indexes only if they exist
    if _index_exists(bind, "ministry_standards", "ix_ministry_standards_subject"):
        op.drop_index(
            op.f("ix_ministry_standards_subject"), table_name="ministry_standards"
        )
    if _index_exists(bind, "ministry_standards", "ix_ministry_standards_grade"):
        op.drop_index(op.f("ix_ministry_standards_grade"), table_name="ministry_standards")
    op.alter_column(
        "ministry_standards",
        "official_document_ref",
        existing_type=sa.VARCHAR(length=255),
        comment="Reference to official ministry document",
        existing_nullable=False,
    )
    op.alter_column(
        "ministry_standards",
        "keywords",
        existing_type=sa.TEXT(),
        comment="Search keywords for content matching",
        existing_nullable=False,
    )
    op.alter_column(
        "ministry_standards",
        "skills",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        comment="Array of skills covered",
        existing_nullable=False,
    )
    op.alter_column(
        "ministry_standards",
        "description",
        existing_type=sa.TEXT(),
        comment="Learning objective description",
        existing_nullable=False,
    )
    op.alter_column(
        "ministry_standards",
        "oa_code",
        existing_type=sa.VARCHAR(length=20),
        comment="Official OA code (e.g., OA 01)",
        existing_nullable=False,
    )
    op.alter_column(
        "ministry_standards",
        "subject",
        existing_type=sa.VARCHAR(length=255),
        comment="Subject name (e.g., MatemÃ¡tica, Lenguaje)",
        existing_nullable=False,
    )
    op.alter_column(
        "ministry_standards",
        "grade",
        existing_type=sa.INTEGER(),
        comment="Grade level (1-12)",
        existing_nullable=False,
    )
    op.alter_column(
        "ministry_standards",
        "oa_id",
        existing_type=sa.VARCHAR(length=50),
        comment="Unique identifier for learning objective (e.g., MAT-5-OA01)",
        existing_nullable=False,
    )
    # Drop column only if it exists
    if _column_exists(bind, "messages", "input_mode"):
        op.drop_column("messages", "input_mode")

    op.create_table_comment(
        "curriculum_content",
        "Educational content chunks aligned with ministry standards",
        existing_comment=None,
        schema=None,
    )

    # Drop indexes only if they exist
    if _index_exists(bind, "curriculum_content", "ix_curriculum_content_subject"):
        op.drop_index(
            op.f("ix_curriculum_content_subject"), table_name="curriculum_content"
        )
    if _index_exists(bind, "curriculum_content", "ix_curriculum_content_keywords"):
        op.drop_index(
            op.f("ix_curriculum_content_keywords"), table_name="curriculum_content"
        )
    if _index_exists(bind, "curriculum_content", "ix_curriculum_content_grade"):
        op.drop_index(op.f("ix_curriculum_content_grade"), table_name="curriculum_content")
    if _index_exists(bind, "curriculum_content", "ix_curriculum_content_difficulty_level"):
        op.drop_index(
            op.f("ix_curriculum_content_difficulty_level"), table_name="curriculum_content"
        )
    op.alter_column(
        "curriculum_content",
        "embedding_generated",
        existing_type=sa.BOOLEAN(),
        comment="Whether vector embedding has been generated",
        existing_nullable=False,
        existing_server_default=sa.text("false"),
    )
    op.alter_column(
        "curriculum_content",
        "source_file",
        existing_type=sa.VARCHAR(length=500),
        comment="Source PDF or document file path",
        existing_nullable=True,
    )
    op.alter_column(
        "curriculum_content",
        "chunk_index",
        existing_type=sa.INTEGER(),
        comment="Index of chunk if split from larger document",
        existing_nullable=True,
        existing_server_default=sa.text("0"),
    )
    op.alter_column(
        "curriculum_content",
        "difficulty_level",
        existing_type=sa.VARCHAR(length=20),
        comment="Content difficulty: easy, medium, hard",
        existing_nullable=False,
    )
    op.alter_column(
        "curriculum_content",
        "keywords",
        existing_type=sa.TEXT(),
        comment="Search keywords",
        existing_nullable=False,
    )
    op.alter_column(
        "curriculum_content",
        "ministry_approved",
        existing_type=sa.INTEGER(),
        comment="0=pending, 1=approved by ministry standards",
        existing_nullable=False,
        existing_server_default=sa.text("0"),
    )
    op.alter_column(
        "curriculum_content",
        "ministry_standard_ref",
        existing_type=sa.VARCHAR(length=255),
        comment="Reference to ministry standard document",
        existing_nullable=False,
    )
    op.alter_column(
        "curriculum_content",
        "learning_objectives",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        comment="Array of OA IDs this content addresses",
        existing_nullable=False,
    )
    op.alter_column(
        "curriculum_content",
        "content_text",
        existing_type=sa.TEXT(),
        comment="Educational content text",
        existing_nullable=False,
    )
    op.alter_column(
        "curriculum_content",
        "subject",
        existing_type=sa.VARCHAR(length=255),
        comment="Subject name",
        existing_nullable=False,
    )
    op.alter_column(
        "curriculum_content",
        "grade",
        existing_type=sa.INTEGER(),
        comment="Grade level (1-12)",
        existing_nullable=False,
    )
    op.alter_column(
        "curriculum_content",
        "title",
        existing_type=sa.VARCHAR(length=255),
        comment="Content title",
        existing_nullable=False,
    )
    op.alter_column(
        "curriculum_content",
        "id",
        existing_type=sa.VARCHAR(length=50),
        comment="Unique identifier for content chunk",
        existing_nullable=False,
    )
    # ### end Alembic commands ###
